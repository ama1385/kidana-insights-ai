import streamlit as st
import pandas as pd
import openpyxl
from openpyxl.styles import PatternFill
import datetime
import pickle
import random

# ✅ إعداد الصفحة
st.set_page_config(page_title="منشئ مؤشرات الأداء الذكي", layout="centered")

# ✅ تنسيق CSS مخصص
st.markdown("""
    <style>
    body {
        background-color: #f9f9fb;
        font-family: 'Segoe UI', sans-serif;
    }
    .stTextInput>div>div>input {
        background-color: #ffffff;
        border: 2px solid #a77af4;
        padding: 6px;
        color: black;
    }
    .stTextArea textarea {
        background-color: #ffffff;
        border: 2px solid #a77af4;
        color: black;
    }
    .stButton>button {
        background-color: #4a148c;
        color: white;
        padding: 0.5em 1em;
        font-weight: bold;
        border-radius: 8px;
    }
    </style>
""", unsafe_allow_html=True)

# --- تحميل النموذج والمتجهات والبيانات المحدثة ---
with open("kpi_model_updated.pkl", "rb") as f:
    model = pickle.load(f)

with open("kpi_vectorizer_updated.pkl", "rb") as f:
    vectorizer = pickle.load(f)

with open("kpi_data.pkl", "rb") as f:
    df_kpi = pickle.load(f)

# --- واجهة المستخدم ---
st.title("📊 منشئ مؤشرات الأداء الذكي")
description = st.text_area("✏️ اكتب وصف المؤشرات المطلوبة (سطر لكل مؤشر):", height=250)

if st.button("🚀 توليد ملف مؤشرات الأداء"):
    if description.strip():
        inputs = description.strip().split("\n")
        generated = []

        for desc in inputs:
            vec = vectorizer.transform([desc])
            idx = model.predict(vec)[0]
            base = df_kpi.iloc[idx]

            actual = random.randint(70, 100)
            target = random.choice([90, 95, 100])
            try:
                score = round((float(actual) / float(target)) * 100, 2)
            except ZeroDivisionError:
                score = 0
            weight = random.choice([5, 10, 15])
            w_score = round(score * (weight / 100), 2)
            status = "On target" if score >= 90 else "Below target"
            achievement = "Achieved" if score >= 90 else "Not Achieved"

            row = {
                "Department": base.get("Department", "General"),
                "Dept. Lvl": base.get("Dept. Lvl", "N-1"),
                "Perspective": base.get("Perspective", "Internal"),
                "Strategic Objective": base.get("Strategic Objective", "N/A"),
                "KPI Code": base.get("KPI Code", f"GEN.{random.randint(100,999)}"),
                "KPI Name": base.get("KPI Name", desc),
                "KPI Formula": base.get("KPI Formula", "(Actual / Target) * 100"),
                "UOM": base.get("UOM", "Percentage"),
                "Frequency": base.get("Frequency", "Quarterly"),
                "Polarity": base.get("Polarity", "Positive"),
                "Weight": weight,
                "Target": target,
                "Actual": actual,
                "Score": score,
                "Weighted Score": w_score,
                "status": status,
                "Achievement": achievement,
                "Challenges ": base.get("Challenges ", ""),
                "Resolve the Challenge ": base.get("Resolve the Challenge ", ""),
                "Support": base.get("Support", ""),
                "status cat": "Measured",
                "new weight": weight,
                "updated date": datetime.datetime.today().strftime("%Y-%m-%d")
            }
            generated.append(row)

        df_out = pd.DataFrame(generated)
        output_file = "KPI_Generated_Styled.xlsx"
        df_out.to_excel(output_file, index=False)

        wb = openpyxl.load_workbook(output_file)
        ws = wb.active
        for row in ws.iter_rows(min_row=2, min_col=16, max_col=16):
            for cell in row:
                try:
                    val = float(cell.value)
                    if val >= 90:
                        cell.fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")
                    else:
                        cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")
                except:
                    cell.fill = PatternFill(start_color="FFEB9C", end_color="FFEB9C", fill_type="solid")

        wb.save(output_file)

        with open(output_file, "rb") as file:
            st.download_button("📥 تحميل ملف مؤشرات الأداء", file, file_name=output_file)
    else:
        st.warning("🛑 يرجى إدخال وصف واحد على الأقل.")
